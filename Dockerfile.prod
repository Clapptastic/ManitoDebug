# Production Dockerfile for ManitoDebug
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    git \
    curl \
    bash \
    postgresql-client \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./
COPY client/package*.json ./client/
COPY server/package*.json ./server/
COPY core/package*.json ./core/

# Install dependencies
RUN npm run install:all

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Set working directory
WORKDIR /app

# Install production dependencies only
RUN apk add --no-cache \
    curl \
    postgresql-client \
    && rm -rf /var/cache/apk/*

# Copy built application from builder stage
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/client/dist ./client/dist
COPY --from=builder /app/server/dist ./server/dist
COPY --from=builder /app/core/dist ./core/dist
COPY --from=builder /app/scripts ./scripts

# Create necessary directories
RUN mkdir -p server/uploads server/logs

# Set environment variables for production
ENV NODE_ENV=production
ENV ENABLE_DYNAMIC_PORTS=true
ENV PORT_RANGE_START=3000
ENV PORT_RANGE_END=3010
ENV CLIENT_PORT_RANGE_START=5173
ENV CLIENT_PORT_RANGE_END=5180
ENV WEBSOCKET_PORT_RANGE_START=3001
ENV WEBSOCKET_PORT_RANGE_END=3010

# Expose dynamic port ranges
EXPOSE 3000-3010 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Production startup script
COPY scripts/start-prod.sh /usr/local/bin/start-prod.sh
RUN chmod +x /usr/local/bin/start-prod.sh

# Set the default command
CMD ["/usr/local/bin/start-prod.sh"]